#!/usr/bin/env bash

# termux-proot - A sandboxed, 2nd termux, isolated or jailed termux environment with proot
# https://git.io/termux-proot

# Dependency check
DEPS=("curl" "unzip" "proot")
for DEP in "${DEPS[@]}"; do
	if ! hash "$DEP" 2>/dev/null; then
		pkg install "$DEP" -y
	fi
done

[ -z "$TERMUX_SANDBOX_PATH" ] && export TERMUX_SANDBOX_PATH="$PREFIX"/../../sandbox

[ -z "$TERMUX_SANDBOX_APPPATH" ] && export TERMUX_SANDBOX_APPPATH=/data/data/com.termux/files

[ "$(id -u)" = "0" ] && exec echo -e "You shouldn't execute this script as root, don't you?\nSo you're trying to harm your own Device.\n\nAbility to use termux-proot with root (even fake) is disabled permanently.\nJust do it in your real termux, Or use chroot. But don't blame me for broken device OK?"

# { Installation }
[ "$(uname -o)" != "Android" ] && exec echo "Sorry. This script is only executable on Android. Use Termux to exexute this or use termux-docker."

if [ ! -d "$TERMUX_SANDBOX_PATH" ] || [ -z "$(ls -A "$TERMUX_SANDBOX_PATH")" ]; then
	if [ ! -f "${TMPDIR:-/tmp}"/.termux-rootfs.zip ]; then
		echo "[#  ] Downloading Latest Termux Bootstrap...."
		curl -Lo "${TMPDIR:-/tmp}"/.termux-rootfs.zip https://github.com/termux/termux-packages/releases/download/"$(curl -s "https://api.github.com/repos/termux/termux-packages/releases/latest" | grep -Po '"tag_name": "\K.*?(?=")')"/bootstrap-"$(dpkg --print-architecture)".zip
	fi
	mkdir "$TERMUX_SANDBOX_PATH" && cd "$TERMUX_SANDBOX_PATH" || exit 1

	echo -n "[## ] Extracting.... "
	if ! unzip -q "${TMPDIR:-/tmp}"/.termux-rootfs.zip; then
		echo "Failed extracting bootstrap!"
		proot -0 rm -rf "$TERMUX_SANDBOX_PATH"
		exit 6
	fi
	echo "Done"
fi

if [ -f "$TERMUX_SANDBOX_PATH/SYMLINKS.txt" ]; then
	cd $TERMUX_SANDBOX_PATH
	echo -n "[###] Symlinking.... "
	while read -r p; do
		IFS="‚Üê" read -r FILE DEST <<< "$p"
		ln -s "$FILE" "$DEST"
	done < SYMLINKS.txt && rm SYMLINKS.txt
	echo "Done"
fi

ARGS=("proot")
ARGS+=("--kill-on-exit -r $TERMUX_SANDBOX_PATH $TERMUX_SANDBOX_PROOT_OPTIONS")

# Make sure that some common directory like /home is there.
# Otherwise, we recreate the directory
for dir in $TERMUX_SANDBOX_PATH/var/cache $TERMUX_SANDBOX_PATH/home $TERMUX_SANDBOX_PATH/sdcard; do
	! [ -d "$dir" ] && mkdir "$dir"
done

# Bind some common path
for bind in /dev /proc /sys /system /vendor /apex /linkerconfig/ld.config.txt /property_context $TERMUX_SANDBOX_PATH:$TERMUX_SANDBOX_APPPATH/usr $TERMUX_SANDBOX_PATH/var/cache:/data/data/com.termux/cache $TERMUX_SANDBOX_PATH/home:$TERMUX_SANDBOX_APPPATH/home; do
	[ -d "$bind" ] || [ -f "$bind" ] || grep -q com.termux <<< "$bind" && ARGS+=("-b $bind")
done

ARGS+=("-w $TERMUX_SANDBOX_APPPATH/home")
ARGS+=("$TERMUX_SANDBOX_APPPATH/usr/bin/env -i")
ARGS+=("HOME=$TERMUX_SANDBOX_APPPATH/home")
ARGS+=("PATH=$TERMUX_SANDBOX_APPPATH/usr/bin")
ARGS+=("TERM=${TERM:-xterm-256color}")
ARGS+=("COLORTERM=${COLORTERM:-truecolor}")
ARGS+=("ANDROID_DATA=/data")
ARGS+=("ANDROID_ROOT=/system")
ARGS+=("EXTERNAL_STORAGE=/sdcard")
ARGS+=("LANG=${LANG:-en_US.UTF-8}")
ARGS+=("LD_LIBRARY_PATH=$TERMUX_SANDBOX_APPPATH/usr/lib")
[ -x "$TERMUX_SANDBOX_APPPATH"/usr/lib/libtermux-exec.so ] && ARGS+=("LD_PRELOAD=$TERMUX_SANDBOX_APPPATH/usr/lib/libtermux-exec.so")
ARGS+=("TERMUX_VERSION=${TERMUX_VERSION:-0.118}")
ARGS+=("PREFIX=$TERMUX_SANDBOX_APPPATH/usr")
ARGS+=("TMPDIR=$TERMUX_SANDBOX_APPPATH/usr/tmp")
ARGS+=("$TERMUX_SANDBOX_ENV")

cmd="$*"

# Unset Preload Library.
unset LD_PRELOAD

# shellcheck disable=SC2068
case "$cmd" in
"")
	exec ${ARGS[@]} /bin/login
	;;
*)
	exec ${ARGS[@]} /bin/login -c "$cmd"
	;;
esac
